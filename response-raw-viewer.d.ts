/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   response-raw-viewer.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css, LitElement} from 'lit-element';

declare namespace ApiElements {

  /**
   * An element to display the raw response data without syntax highlighting.
   *
   * ### Example
   *
   * ```html
   * <response-raw-viewer responsetext="Some response"></response-raw-viewer>
   * <script>
   * const display = document.querySelector('response-raw-viewer');
   * display.responseText = someResponse;
   * < /script>
   * ```
   *
   * ## Content actions
   *
   * Custom actions can be defined by adding a child with `slot="content-action"`
   * attribute set. Eny element will be rendered in content action field.
   *
   * ### Example
   *
   * ```html
   * <response-raw-viewer>
   *  <paper-icon-button slot="content-action"
   *    title="Copy content to clipboard" icon="arc:content-copy"></paper-icon-button>
   * </response-raw-viewer>
   * ```
   *
   * See demo for more examples.
   *
   * ## Content text wrapping
   *
   * Set `wraptext` attribute on the element to force the wiewer to wrap text.
   */
  class ResponseRawViewer extends
    PayloadParserMixin(
    LitElement) {
    readonly _actionsPanelClass: any;

    /**
     * The response text to display.
     */
    responseText: string|null|undefined;

    /**
     * If set to true then the text in the panel will be wrapped.
     */
    wrapText: boolean|null|undefined;
    constructor();
    render(): any;

    /**
     * ARC stores workspace data with response object in a file.
     * It may happen that the data is a buffer when saving. This restores
     * the string if needed.
     *
     * @param response Usually string response but may be
     * ARC converted object.
     * @returns Safe to process string.
     */
    _responseValue(response: String|object|null): String|null;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "response-raw-viewer": ApiElements.ResponseRawViewer;
  }
}
