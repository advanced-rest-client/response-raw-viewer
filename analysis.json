{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "An element to display the raw response data without syntax highlighting.\n\n### Example\n\n```html\n<response-raw-viewer response-text=\"Some response\"></response-raw-viewer>\n<script>\nconst display = document.querySelector('response-raw-viewer');\ndisplay.responseText = someResponse;\n< /script>\n```\n\n## Content actions\n\nCustom actions can be defined by adding a child with `slot=\"content-action\"`\nattribute set. Eny element will be rendered in content action field.\n\n### Example\n\n```html\n<response-raw-viewer>\n <paper-icon-button slot=\"content-action\"\n   title=\"Copy content to clipboard\" icon=\"arc:content-copy\"></paper-icon-button>\n</response-raw-viewer>\n```\n\nSee demo for more examples.\n\n## Content text wrapping\n\nSet `wrap-text` property on the element to force the wiewer to wrap text.\n\n## Changes in version 2\n\n- The element does not support custom search and does not include text search library\n\n### Styling\n\n`<response-raw-viewer>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--response-raw-viewer` | Mixin applied to the element | `{}`\n`--arc-font-code1` | Mixin applied to the code block (theme mixin) | `{}`\n`--response-raw-viewer-button-active` | Background color of the `wrap` button | `#BDBDBD`\n`--response-raw-viewer-action-bar` | Mixin applied to the action bar above the highlighted code | `{}`\n`--no-info-message` | Mixin applied to the \"nothing to display\" message (theme variable) | `{}`\n`--response-raw-viewer-code` | Mixin applied to the code block | `{}`",
      "summary": "",
      "path": "response-raw-viewer.js",
      "properties": [
        {
          "name": "AMP_RE",
          "type": "?",
          "description": "Regexp to search for the `&` character",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "GT_RE",
          "type": "?",
          "description": "Regexp to search for the `>` character",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "LT_RE",
          "type": "?",
          "description": "Regexp to search for the `<` character",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "SQUOT_RE",
          "type": "?",
          "description": "Regexp to search for the `'` character",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "QUOT_RE",
          "type": "?",
          "description": "Regexp to search for the `\"` character",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "responseText",
          "type": "string | null | undefined",
          "description": "The response text to display.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 135,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_responseChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "hasResponse",
          "type": "boolean | null | undefined",
          "description": "Computed value, true if the responseText has text.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "wrapText",
          "type": "boolean | null | undefined",
          "description": "If set to true then the text in the panel will be wrapped.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "htmlEscape",
          "description": "Escape HTML to save HTML text.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 93,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "html",
              "type": "String",
              "description": "A HTML string to be escaped."
            }
          ],
          "return": {
            "type": "String"
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "formArrayToString",
          "description": "Parse input array to string x-www-form-urlencoded.\n\nNote that this function doesn't encodes the name and value. Use\n`this.formArrayToString(this.encodeUrlEncoded(arr))`\nto create a encoded string from the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 105,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array.<Object>",
              "description": "Input array. Each element must contain an\nobject with `name` and `value` keys."
            }
          ],
          "return": {
            "type": "String",
            "desc": "A parsed string of `name`=`value` pairs of the input objects."
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_modelItemToFormDataString",
          "description": "Creates a form data string for a single item.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "The model with `name` and `value` properties."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Generated value string for x-www-form-urlencoded form."
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "stringToArray",
          "description": "Parse input string to array of x-www-form-urlencoded form parameters.\n\nThis function will not url-decode names and values. Please, use\n`this.decodeUrlEncoded(this.stringToArray(str))` to create an array\nof decoded parameters.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "A string of HTTP x-www-form-urlencoded parameters"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "An array of params with `name` and `value` keys."
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_createParamsArray",
          "description": "Converts a string to an array with objects containing name and value keys",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 172,
              "column": 4
            },
            "end": {
              "line": 209,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "An input string"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "An array of params with `name` and `value` keys."
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_appendArrayResult",
          "description": "Appends form data parameter to an array.\nIf the parameter already exists in the array it creates an array for\nthe value onstead of appending the same parameter.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "array",
              "type": "Array",
              "description": "An array to append the parameter"
            },
            {
              "name": "name",
              "type": "String",
              "description": "Name of the form data parameter"
            },
            {
              "name": "value",
              "type": "String",
              "description": "Value of the form data parameter"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Updated array"
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "encodeUrlEncoded",
          "description": "Encode payload to x-www-form-urlencoded string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 259,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "(Array.<object> | String)",
              "description": "An input data."
            }
          ],
          "return": {
            "type": "(Array.<object> | String)"
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_encodeValue",
          "description": "URL encodes a value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | Array.<String>)",
              "description": "Value to encode. Either string or\narray of strings."
            }
          ],
          "return": {
            "type": "(String | Array.<String>)",
            "desc": "Encoded value. The same type as the input."
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "decodeUrlEncoded",
          "description": "Decode x-www-form-urlencoded data.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 282,
              "column": 4
            },
            "end": {
              "line": 298,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "(Array.<object> | String)",
              "description": "An input data."
            }
          ],
          "return": {
            "type": "(Array.<object> | String)"
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_decodeValue",
          "description": "URL decodes a value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 306,
              "column": 4
            },
            "end": {
              "line": 314,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | Array.<String>)",
              "description": "Value to decode. Either string or\narray of strings."
            }
          ],
          "return": {
            "type": "(String | Array.<String>)",
            "desc": "Decoded value. The same type as the input."
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_paramValue",
          "description": "Parse input string as a payload param key or value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "An input to parse."
            }
          ],
          "return": {
            "type": "String"
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_paramLineToFormObject",
          "description": "Parse a line of key=value http params into an object with `name` and `value` keys.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 336,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "A input line of x-www-form-urlencoded text tike `param=value`"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "A parsed object with `name` and `value` keys."
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "encodeQueryString",
          "description": "Returns a string where all characters that are not valid for a URL\ncomponent have been escaped. The escaping of a character is done by\nconverting it into its UTF-8 encoding and then encoding each of the\nresulting bytes as a %xx hexadecimal escape sequence.\n\nNote: this method will convert any space character into its escape\nshort form, '+' rather than %20. It should therefore only be used for\nquery-string parts.\n\nThe following character sets are **not** escaped by this method:\n- ASCII digits or letters\n- ASCII punctuation characters: ```- _ . ! ~ * ' ( )</pre>```\n\nNotice that this method <em>does</em> encode the URL component delimiter\ncharacters:<blockquote>\n\n```\n; / ? : & = + $ , #\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 380,
              "column": 4
            },
            "end": {
              "line": 386,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "A string containing invalid URL characters"
            }
          ],
          "return": {
            "type": "String",
            "desc": "a string with all invalid URL characters escaped"
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "decodeQueryString",
          "description": "Returns a string where all URL component escape sequences have been\nconverted back to their original character representations.\n\nNote: this method will convert the space character escape short form, '+',\ninto a space. It should therefore only be used for query-string parts.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/payload-parser-mixin/payload-parser-mixin.js",
            "start": {
              "line": 397,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "string containing encoded URL component sequences"
            }
          ],
          "return": {
            "type": "String",
            "desc": "string with no encoded URL component encoded sequences"
          },
          "inheritedFrom": "ArcBehaviors.PayloadParserMixin"
        },
        {
          "name": "_responseChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "response"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_responseValue",
          "description": "ARC stores workspace data with response object in a file.\nIt may happen that the data is a buffer when saving. This restores\nthe string if needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "response",
              "type": "(String | Object)",
              "description": "Usually string response but may be\nARC converted object."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Safe to process string."
          }
        },
        {
          "name": "_computeHasResponse",
          "description": "Computes if the response is available and content is displayed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 2
            },
            "end": {
              "line": 187,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "responseText"
            }
          ]
        },
        {
          "name": "_computeActionsPanelClass",
          "description": "Computes CSS class for the actions pane.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasResponse",
              "type": "Boolean",
              "description": "The `hasResponse` propety value of the\nelement."
            }
          ],
          "return": {
            "type": "String",
            "desc": "CSS class names for the panel depending on state of the\n`hasResponse`property."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 73,
          "column": 0
        },
        "end": {
          "line": 203,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ApiElements.ResponseRawViewer",
      "attributes": [
        {
          "name": "response-text",
          "description": "The response text to display.",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 135,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "has-response",
          "description": "Computed value, true if the responseText has text.",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "wrap-text",
          "description": "If set to true then the text in the panel will be wrapped.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "response-raw-viewer",
      "mixins": [
        "PayloadParserMixin"
      ]
    }
  ]
}
